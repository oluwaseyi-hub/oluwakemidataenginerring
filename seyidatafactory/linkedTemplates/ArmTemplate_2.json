{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "seyidatafactory"
		},
		"TR_dessertforall_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/81141c92-9125-49b0-87a3-ab9093ff889b/resourceGroups/RG-oluwaseyi/providers/Microsoft.Storage/storageAccounts/adlsforproject3"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_forzipfiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_data_to_staging",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_efp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Ds_to_unzipBinary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-28T23:21:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_for_dessert_for_all')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_copy_from_bronzeParquetDF",
								"type": "DatasetReference"
							},
							"name": "dessertforalldata"
						},
						{
							"dataset": {
								"referenceName": "DS_froms_silver_Parquet1",
								"type": "DatasetReference"
							},
							"name": "Silverdessertforall"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Ds_Bronze_to_Silver_Parquet1",
								"type": "DatasetReference"
							},
							"name": "OutforDessertforall"
						},
						{
							"dataset": {
								"referenceName": "DS_dedicatedfordessert2",
								"type": "DatasetReference"
							},
							"name": "GoldDessert"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnforRevenue"
						},
						{
							"name": "aggregateDessert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesMonth as string,",
						"          Retailer as string,",
						"          Product as string,",
						"          SalesValueUSD as integer,",
						"          UnitsSold as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> dessertforalldata",
						"source(output(",
						"          SalesMonth as string,",
						"          Retailer as string,",
						"          Product as string,",
						"          SalesValueUSD as integer,",
						"          UnitsSold as integer,",
						"          Revenue as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Silverdessertforall",
						"dessertforalldata derive(Revenue = SalesValueUSD*UnitsSold) ~> derivedColumnforRevenue",
						"Silverdessertforall aggregate(groupBy(Product),",
						"     totalrevenue = sum(Revenue)) ~> aggregateDessert",
						"derivedColumnforRevenue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OutforDessertforall",
						"aggregateDessert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Revenue as integer,",
						"          product as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Revenue = totalrevenue,",
						"          product = Product",
						"     )) ~> GoldDessert"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_for_jolly_Good')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_excel_from_jolly_good",
								"type": "DatasetReference"
							},
							"name": "jollyGoodexceldata",
							"description": "jollyGood for exchage rate"
						},
						{
							"linkedService": {
								"referenceName": "LS_fornewADLSstorage",
								"type": "LinkedServiceReference"
							},
							"name": "ExchangeRatejollygood"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Sql_Excel_date",
								"type": "DatasetReference"
							},
							"name": "sinkSqlExceldata"
						}
					],
					"transformations": [
						{
							"name": "FilterOutMonthTotal"
						},
						{
							"name": "filterCurrencyToUSD"
						},
						{
							"name": "LookupExchangeRate"
						},
						{
							"name": "derivedColumnforTotalSales"
						},
						{
							"name": "SelectTargetColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Period as date,",
						"          Product as string,",
						"          {Unit Price} as double,",
						"          Currency as string,",
						"          {Units Sold} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> jollyGoodexceldata",
						"source(output(",
						"          FromCurrency as string,",
						"          ToCurrency as string,",
						"          Date as date,",
						"          ExchangeRate as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     fileSystem: 'staging',",
						"     folderPath: 'Azure-Data-Factory-by-Example-Second-Edition-main/SampleData',",
						"     fileName: 'ExchangeRates.xlsx',",
						"     sheetName: 'Sheet1',",
						"     firstRowAsHeader: true) ~> ExchangeRatejollygood",
						"jollyGoodexceldata filter(Product!='Month Total') ~> FilterOutMonthTotal",
						"ExchangeRatejollygood filter(ToCurrency=='USD') ~> filterCurrencyToUSD",
						"FilterOutMonthTotal, filterCurrencyToUSD lookup(Period == Date",
						"     && Currency == FromCurrency,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupExchangeRate",
						"LookupExchangeRate derive(SalesValueUSD = round({Unit Price}*{Units Sold}*ExchangeRate,2)) ~> derivedColumnforTotalSales",
						"derivedColumnforTotalSales select(mapColumn(",
						"          Product,",
						"          {Unit Price},",
						"          {Units Sold},",
						"          Date,",
						"          SalesValueUSD",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTargetColumns",
						"SelectTargetColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Product as string,",
						"          {Unit Price} as integer,",
						"          UnitsSold as integer,",
						"          Date as date,",
						"          SalesValueUSD as decimal(18,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product,",
						"          {Unit Price},",
						"          UnitsSold = {Units Sold},",
						"          Date,",
						"          SalesValueUSD",
						"     )) ~> sinkSqlExceldata"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_copy_from_saleslanding_to_broonze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_landing_to_bronze_dessertforall",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "Azure-Data-Factory-by-Example-Second-Edition-main/SampleData/Desserts4All",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "ls_blobstcopy",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SalesMonth",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SalesMonth",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Retailer",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Retailer",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Product",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SalesValueUSD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SalesValueUSD",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UnitsSold",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UnitsSold",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_copy_from_landing_to_bronze_dessertforall",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Ds_bronze_Parquet_dessertforall",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "dataflow_for_dessert_for_all",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy_landing_to_bronze_dessertforall",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_for_dessert_for_all",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dessertforalldata": {},
									"Silverdessertforall": {},
									"OutforDessertforall": {},
									"GoldDessert": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_ADLSproject3",
									"type": "LinkedServiceReference"
								},
								"folderPath": "gold"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_for_dessert_for_all')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_dataflowjollygood')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data_flow_for_jolly_good",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_for_jolly_Good",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"jollyGoodexceldata": {},
									"ExchangeRatejollygood": {},
									"sinkSqlExceldata": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_for_jolly_Good')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TR_dessertforall')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "trigger_for_dessert_for_all",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_copy_from_saleslanding_to_broonze",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/bronze/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('TR_dessertforall_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_copy_from_saleslanding_to_broonze')]"
			]
		}
	]
}